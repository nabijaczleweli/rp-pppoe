From f33fca8520332af20f14529a41ec94ae2c515b0f Mon Sep 17 00:00:00 2001
From: nabijaczleweli <nabijaczleweli@gmail.com>
Date: Mon, 4 May 2020 18:26:03 +0200
Subject: [PATCH 4/5] Always use echo from $PATH at runtime

Also replaces one indirection per line with a {}-group indirection and
""-escapes some $-expansions in pppoe-start.in

This extends Andreas Henriksson's "Avoid useless indirection and full
path embedding of echo" Debian patch, which can be found in
d/p/07_pppoestart-echo.patch in rp-pppoe 3.12-1.2, and was originally
submitted in https://bugs.debian.org/bug=915295. Original message
follows:

Embedding the full path of echo at build-time, instead of relying
on PATH at *runtime* seems pointless. Spawning a command rather than
using using plain echo which is often a shell-builtin is wasteful.

The script also doesn't even consistently use $ECHO, but atleast
in one place already uses plain echo.

Thus this patch just drops the entire indirection.
(Even better would be to join the gazillion echos run one after the
other into a single write.)

Apart from generally being a sane thing to do, this patch fixes
the reproducible build failure on merged-usr vs non-merged systems
as was spotted at:
https://tests.reproducible-builds.org/debian/rb-pkg/unstable/amd64/rp-pppoe.html
---
 scripts/pppoe-setup.in | 207 ++++++++++++++++++++---------------------
 scripts/pppoe-start.in | 108 ++++++++++-----------
 src/configure          |  45 +--------
 src/configure.in       |   4 +-
 4 files changed, 159 insertions(+), 205 deletions(-)

diff --git a/scripts/pppoe-setup.in b/scripts/pppoe-setup.in
index 4785eae..9327689 100755
--- a/scripts/pppoe-setup.in
+++ b/scripts/pppoe-setup.in
@@ -20,7 +20,6 @@ exec_prefix=@exec_prefix@
 IFCONFIG=/sbin/ifconfig
 PPPD=@PPPD@
 PPPOE=@sbindir@/pppoe
-ECHO=@ECHO@
 LOGGER="/usr/bin/logger -t `basename $0`"
 
 # Set to "C" locale so we can parse messages from commands
@@ -35,34 +34,34 @@ umask 077
 copy() {
     cp $1 $2
     if [ "$?" != 0 ] ; then
-	$ECHO "*** Error copying $1 to $2"
-	$ECHO "*** Quitting."
+	echo "*** Error copying $1 to $2"
+	echo "*** Quitting."
 	exit 1
     fi
 }
 
-$ECHO "Welcome to the RP-PPPoE client setup.  First, I will run"
-$ECHO "some checks on your system to make sure the PPPoE client is installed"
-$ECHO "properly..."
-$ECHO ""
+echo "Welcome to the RP-PPPoE client setup.  First, I will run"
+echo "some checks on your system to make sure the PPPoE client is installed"
+echo "properly..."
+echo ""
 
 # Must be root
 if [ "`@ID@ -u`" != 0 ] ; then
-    $ECHO "$0: Sorry, you must be root to run this script"
+    echo "$0: Sorry, you must be root to run this script"
     exit 1
 fi
 
 # Prototype config file must exist
 if [ ! -r "$CONFIG" ] ; then
-    $ECHO "Oh, dear, I don't see the file '$CONFIG' anywhere.  Please"
-    $ECHO "re-install the PPPoE client."
+    echo "Oh, dear, I don't see the file '$CONFIG' anywhere.  Please"
+    echo "re-install the PPPoE client."
     exit 1
 fi
 
 # Must have pppd
 if [ ! -x $PPPD ] ; then
-    $ECHO "Oops, I can't execute the program '$PPPD'.  You"
-    $ECHO "must install the PPP software suite, version 2.3.10 or later."
+    echo "Oops, I can't execute the program '$PPPD'.  You"
+    echo "must install the PPP software suite, version 2.3.10 or later."
     exit 1
 fi
 export CONFIG
@@ -74,17 +73,17 @@ fi
 
 # pppoe must exist
 if [ ! -x "$PPPOE" ] ; then
-    $ECHO "Oh, dear, I can't execute the program '$PPPOE'.  Please"
-    $ECHO "re-install the rp-pppoe client."
+    echo "Oh, dear, I can't execute the program '$PPPOE'.  Please"
+    echo "re-install the rp-pppoe client."
     exit 1
 fi
 
-$ECHO "Looks good!  Now, please enter some information:"
+echo "Looks good!  Now, please enter some information:"
 
 while [ true ] ; do
-    $ECHO ""
-    $ECHO "USER NAME"
-    $ECHO ""
+    echo ""
+    echo "USER NAME"
+    echo ""
     printf "%s" ">>> Enter your PPPoE user name (default $USER): "
     read U
 
@@ -96,12 +95,12 @@ while [ true ] ; do
     if test `uname -s` = "Linux" ; then
 	$IFCONFIG $ETH > /dev/null 2>&1 || ETH=eth0
     fi
-    $ECHO ""
-    $ECHO "INTERFACE"
-    $ECHO ""
-    $ECHO ">>> Enter the Ethernet interface connected to the DSL modem"
-    $ECHO "For Solaris, this is likely to be something like /dev/hme0."
-    $ECHO "For Linux, it will be ethn, where 'n' is a number."
+    echo ""
+    echo "INTERFACE"
+    echo ""
+    echo ">>> Enter the Ethernet interface connected to the DSL modem"
+    echo "For Solaris, this is likely to be something like /dev/hme0."
+    echo "For Linux, it will be ethn, where 'n' is a number."
     printf "%s" "(default $ETH): "
     read E
 
@@ -109,27 +108,27 @@ while [ true ] ; do
 	E="$ETH"
     fi
 
-    $ECHO ""
-    $ECHO "Do you want the link to come up on demand, or stay up continuously?"
-    $ECHO "If you want it to come up on demand, enter the idle time in seconds"
-    $ECHO "after which the link should be dropped.  If you want the link to"
-    $ECHO "stay up permanently, enter 'no' (two letters, lower-case.)"
-    $ECHO "NOTE: Demand-activated links do not interact well with dynamic IP"
-    $ECHO "addresses.  You may have some problems with demand-activated links."
+    echo ""
+    echo "Do you want the link to come up on demand, or stay up continuously?"
+    echo "If you want it to come up on demand, enter the idle time in seconds"
+    echo "after which the link should be dropped.  If you want the link to"
+    echo "stay up permanently, enter 'no' (two letters, lower-case.)"
+    echo "NOTE: Demand-activated links do not interact well with dynamic IP"
+    echo "addresses.  You may have some problems with demand-activated links."
     printf "%s" ">>> Enter the demand value (default $DEMAND): "
     read D
     if [ "$D" = "" ] ; then
 	D=$DEMAND
     fi
 
-    $ECHO ""
-    $ECHO "DNS"
-    $ECHO ""
-    $ECHO "Please enter the IP address of your ISP's primary DNS server."
-    $ECHO "If your ISP claims that 'the server will provide DNS addresses',"
-    $ECHO "enter 'server' (all lower-case) here."
-    $ECHO "If you just press enter, I will assume you know what you are"
-    $ECHO "doing and not modify your DNS setup."
+    echo ""
+    echo "DNS"
+    echo ""
+    echo "Please enter the IP address of your ISP's primary DNS server."
+    echo "If your ISP claims that 'the server will provide DNS addresses',"
+    echo "enter 'server' (all lower-case) here."
+    echo "If you just press enter, I will assume you know what you are"
+    echo "doing and not modify your DNS setup."
     printf "%s" ">>> Enter the DNS information here: "
 
     read DNS1
@@ -137,24 +136,24 @@ while [ true ] ; do
 
     if [ "$DNS1" != "" ] ; then
         if [ "$DNS1" != "server" ] ; then
-	    $ECHO "Please enter the IP address of your ISP's secondary DNS server."
-	    $ECHO "If you just press enter, I will assume there is only one DNS server."
+	    echo "Please enter the IP address of your ISP's secondary DNS server."
+	    echo "If you just press enter, I will assume there is only one DNS server."
 	    printf "%s" ">>> Enter the secondary DNS server address here: "
 	    read DNS2
 	fi
     fi
 
     while [ true ] ; do
-	$ECHO ""
-	$ECHO "PASSWORD"
-	$ECHO ""
+	echo ""
+	echo "PASSWORD"
+	echo ""
 	stty -echo
 	printf "%s" ">>> Please enter your PPPoE password:    "
 	read PWD1
-	$ECHO ""
+	echo ""
 	printf "%s" ">>> Please re-enter your PPPoE password: "
 	read PWD2
-	$ECHO ""
+	echo ""
 	stty echo
 	if [ "$PWD1" = "$PWD2" ] ; then
 	    break
@@ -164,44 +163,44 @@ while [ true ] ; do
 	read ANS
 	case "$ANS" in
 	    N|No|NO|Non|n|no|non)
-		$ECHO "OK, quitting.  Bye."
+		echo "OK, quitting.  Bye."
 		exit 1
 	esac
     done
 
     # Firewalling
-    $ECHO ""
-    $ECHO "FIREWALLING"
-    $ECHO ""
+    echo ""
+    echo "FIREWALLING"
+    echo ""
     if test `uname -s` != "Linux" ; then
-	$ECHO "Sorry, firewalling is only supported under Linux.  Consult"
-	$ECHO "your operating system manuals for details on setting up"
-	$ECHO "packet filters for your system."
+	echo "Sorry, firewalling is only supported under Linux.  Consult"
+	echo "your operating system manuals for details on setting up"
+	echo "packet filters for your system."
 	FIREWALL=NONE
     else
-	$ECHO "Please choose the firewall rules to use.  Note that these rules are"
-	$ECHO "very basic.  You are strongly encouraged to use a more sophisticated"
-	$ECHO "firewall setup; however, these will provide basic security.  If you"
-	$ECHO "are running any servers on your machine, you must choose 'NONE' and"
-	$ECHO "set up firewalling yourself.  Otherwise, the firewall rules will deny"
-	$ECHO "access to all standard servers like Web, e-mail, ftp, etc.  If you"
-	$ECHO "are using SSH, the rules will block outgoing SSH connections which"
-	$ECHO "allocate a privileged source port."
-	$ECHO ""
+	echo "Please choose the firewall rules to use.  Note that these rules are"
+	echo "very basic.  You are strongly encouraged to use a more sophisticated"
+	echo "firewall setup; however, these will provide basic security.  If you"
+	echo "are running any servers on your machine, you must choose 'NONE' and"
+	echo "set up firewalling yourself.  Otherwise, the firewall rules will deny"
+	echo "access to all standard servers like Web, e-mail, ftp, etc.  If you"
+	echo "are using SSH, the rules will block outgoing SSH connections which"
+	echo "allocate a privileged source port."
+	echo ""
 	while [ true ] ; do
-	    $ECHO "The firewall choices are:"
-	    $ECHO "0 - NONE: This script will not set any firewall rules.  You are responsible"
-	    $ECHO "          for ensuring the security of your machine.  You are STRONGLY"
-	    $ECHO "          recommended to use some kind of firewall rules."
-	    $ECHO "1 - STANDALONE: Appropriate for a basic stand-alone web-surfing workstation"
-	    $ECHO "2 - MASQUERADE: Appropriate for a machine acting as an Internet gateway"
-	    $ECHO "                for a LAN"
+	    echo "The firewall choices are:"
+	    echo "0 - NONE: This script will not set any firewall rules.  You are responsible"
+	    echo "          for ensuring the security of your machine.  You are STRONGLY"
+	    echo "          recommended to use some kind of firewall rules."
+	    echo "1 - STANDALONE: Appropriate for a basic stand-alone web-surfing workstation"
+	    echo "2 - MASQUERADE: Appropriate for a machine acting as an Internet gateway"
+	    echo "                for a LAN"
 	    printf "%s" ">>> Choose a type of firewall (0-2): "
 	    read a
 	    if [ "$a" = 0 -o "$a" = 1 -o "$a" = 2 ] ; then
 		break
 	    fi
-	    $ECHO "Please enter a number from 0 to 2"
+	    echo "Please enter a number from 0 to 2"
 	done
 
 	case "$a" in
@@ -217,31 +216,31 @@ while [ true ] ; do
 	esac
     fi
 
-    $ECHO ""
-    $ECHO "** Summary of what you entered **"
-    $ECHO ""
-    $ECHO "Ethernet Interface: $E"
-    $ECHO "User name:          $U"
+    echo ""
+    echo "** Summary of what you entered **"
+    echo ""
+    echo "Ethernet Interface: $E"
+    echo "User name:          $U"
     if [ "$D" = "no" ] ; then
-	$ECHO "Activate-on-demand: No"
+	echo "Activate-on-demand: No"
     else
-	$ECHO "Activate-on-demand: Yes; idle timeout = $D seconds"
+	echo "Activate-on-demand: Yes; idle timeout = $D seconds"
     fi
 
     if [ "$DNS1" != "" ] ; then
         if [ "$DNS1" = "server" ] ; then
-	    $ECHO "DNS addresses:      Supplied by ISP's server"
+	    echo "DNS addresses:      Supplied by ISP's server"
         else
-	    $ECHO "Primary DNS:        $DNS1"
+	    echo "Primary DNS:        $DNS1"
 	    if [ "$DNS2" != "" ] ; then
-		$ECHO "Secondary DNS:      $DNS2"
+		echo "Secondary DNS:      $DNS2"
 	    fi
         fi
     else
-	$ECHO "DNS:                Do not adjust"
+	echo "DNS:                Do not adjust"
     fi
-    $ECHO "Firewalling:        $FIREWALL"
-    $ECHO ""
+    echo "Firewalling:        $FIREWALL"
+    echo ""
     while [ true ] ; do
         printf "%s" '>>> Accept these settings and adjust configuration files (y/n)? '
         read ANS
@@ -264,7 +263,7 @@ done
 
 # Adjust configuration files.  First to $CONFIG
 
-$ECHO "Adjusting $CONFIG"
+echo "Adjusting $CONFIG"
 
 copy $CONFIG $CONFIG-bak
 if [ "$DNS1" = "server" ] ; then
@@ -300,53 +299,53 @@ sed -e "s&^USER=.*&USER='$U'&" \
     < $CONFIG-bak > $CONFIG
 
 if [ $? != 0 ] ; then
-    $ECHO "** Error modifying $CONFIG"
-    $ECHO "** Quitting"
+    echo "** Error modifying $CONFIG"
+    echo "** Quitting"
     exit 1
 fi
 
 if [ "$DNS1" != "" ] ; then
     if [ "$DNS1" != "server" ] ; then
-	$ECHO "Adjusting /etc/resolv.conf"
+	echo "Adjusting /etc/resolv.conf"
 	if [ -r /etc/resolv.conf ] ; then
 	    grep -s "MADE-BY-RP-PPPOE" /etc/resolv.conf > /dev/null 2>&1
 	    if [ "$?" != 0 ] ; then
-		$ECHO "  (But first backing it up to /etc/resolv.conf-bak)"
+		echo "  (But first backing it up to /etc/resolv.conf-bak)"
 		copy /etc/resolv.conf /etc/resolv.conf-bak
 	    fi
 	fi
-	$ECHO "# MADE-BY-RP-PPPOE" > /etc/resolv.conf
-	$ECHO "nameserver $DNS1" >> /etc/resolv.conf
+	echo "# MADE-BY-RP-PPPOE" > /etc/resolv.conf
+	echo "nameserver $DNS1" >> /etc/resolv.conf
 	if [ "$DNS2" != "" ] ; then
-	    $ECHO "nameserver $DNS2" >> /etc/resolv.conf
+	    echo "nameserver $DNS2" >> /etc/resolv.conf
 	fi
     fi
 fi
 
-$ECHO "Adjusting /etc/ppp/pap-secrets and /etc/ppp/chap-secrets"
+echo "Adjusting /etc/ppp/pap-secrets and /etc/ppp/chap-secrets"
 if [ -r /etc/ppp/pap-secrets ] ; then
-    $ECHO "  (But first backing it up to /etc/ppp/pap-secrets-bak)"
+    echo "  (But first backing it up to /etc/ppp/pap-secrets-bak)"
     copy /etc/ppp/pap-secrets /etc/ppp/pap-secrets-bak
 else
     cp /dev/null /etc/ppp/pap-secrets-bak
 fi
 if [ -r /etc/ppp/chap-secrets ] ; then
-    $ECHO "  (But first backing it up to /etc/ppp/chap-secrets-bak)"
+    echo "  (But first backing it up to /etc/ppp/chap-secrets-bak)"
     copy /etc/ppp/chap-secrets /etc/ppp/chap-secrets-bak
 else
     cp /dev/null /etc/ppp/chap-secrets-bak
 fi
 
 egrep -v "^$U|^\"$U\"" /etc/ppp/pap-secrets-bak > /etc/ppp/pap-secrets
-$ECHO "\"$U\"	*	\"$PWD1\"" >> /etc/ppp/pap-secrets
+echo "\"$U\"	*	\"$PWD1\"" >> /etc/ppp/pap-secrets
 egrep -v "^$U|^\"$U\"" /etc/ppp/chap-secrets-bak > /etc/ppp/chap-secrets
-$ECHO "\"$U\"	*	\"$PWD1\"" >> /etc/ppp/chap-secrets
-
-$ECHO ""
-$ECHO ""
-$ECHO ""
-$ECHO "Congratulations, it should be all set up!"
-$ECHO ""
-$ECHO "Type 'pppoe-start' to bring up your PPPoE link and 'pppoe-stop' to bring"
-$ECHO "it down.  Type 'pppoe-status' to see the link status."
+echo "\"$U\"	*	\"$PWD1\"" >> /etc/ppp/chap-secrets
+
+echo ""
+echo ""
+echo ""
+echo "Congratulations, it should be all set up!"
+echo ""
+echo "Type 'pppoe-start' to bring up your PPPoE link and 'pppoe-stop' to bring"
+echo "it down.  Type 'pppoe-status' to see the link status."
 exit 0
diff --git a/scripts/pppoe-start.in b/scripts/pppoe-start.in
index c90e46a..52a53bd 100755
--- a/scripts/pppoe-start.in
+++ b/scripts/pppoe-start.in
@@ -29,7 +29,6 @@ exec_prefix=@exec_prefix@
 
 # Paths to programs
 CONNECT=@sbindir@/pppoe-connect
-ECHO=@ECHO@
 IFCONFIG=/sbin/ifconfig
 
 # Set to "C" locale so we can parse messages from commands
@@ -43,63 +42,64 @@ ETH=""
 ME=`basename $0`
 # Must be root
 if [ "`@ID@ -u`" != 0 ] ; then
-    $ECHO "$ME: You must be root to run this script" >& 2
+    echo "$ME: You must be root to run this script" >& 2
     exit 1
 fi
 
 # Debugging
 if [ "$DEBUG" = "1" ] ; then
-    $ECHO "*** Running in debug mode... please be patient..."
-    DEBUG=/tmp/pppoe-debug-$$
-    export DEBUG
-    mkdir $DEBUG
+    echo "*** Running in debug mode... please be patient..."
+    DEBUG="/tmp/pppoe-debug-$$"
+    mkdir "$DEBUG"
     if [ "$?" != 0 ] ; then
-	$ECHO "Could not create directory $DEBUG... exiting"
+	echo "Could not create directory $DEBUG... exiting"
 	exit 1
     fi
-    DEBUG=$DEBUG/pppoe-debug.txt
+    DEBUG="$DEBUG/pppoe-debug.txt"
 
     # Initial debug output
-    $ECHO "---------------------------------------------" > $DEBUG
-    $ECHO "* The following section contains information about your system" >> $DEBUG
-    date >> $DEBUG
-    $ECHO "Output of uname -a" >> $DEBUG
-    uname -a >> $DEBUG
-    $ECHO "---------------------------------------------" >> $DEBUG
-    $ECHO "* The following section contains information about your network" >> $DEBUG
-    $ECHO "* interfaces.  The one you chose for PPPoE should contain the words:" >> $DEBUG
-    $ECHO "* 'UP' and 'RUNNING'.  If it does not, you probably have an Ethernet" >> $DEBUG
-    $ECHO "* driver problem." >> $DEBUG
-    $ECHO "Output of ifconfig -a" >> $DEBUG
-    $IFCONFIG -a >> $DEBUG
-    $ECHO "---------------------------------------------" >> $DEBUG
-    if [ "`uname -s`" = "Linux" ] ; then
-        $ECHO "* The following section contains information about kernel modules" >> $DEBUG
-	$ECHO "* If the module for your Ethernet card is 'tulip', you might" >> $DEBUG
-	$ECHO "* want to look for an updated version at http://www.scyld.com" >> $DEBUG
-	$ECHO "Output of lsmod" >> $DEBUG
-	lsmod >> $DEBUG
-	$ECHO "---------------------------------------------" >> $DEBUG
-    fi
-    $ECHO "* The following section lists your routing table." >> $DEBUG
-    $ECHO "* If you have an entry which starts with '0.0.0.0', you probably" >> $DEBUG
-    $ECHO "* have defined a default route and gateway, and pppd will" >> $DEBUG
-    $ECHO "* not create a default route using your ISP.  Try getting" >> $DEBUG
-    $ECHO "* rid of this route." >> $DEBUG
-    $ECHO "Output of netstat -n -r" >> $DEBUG
-    netstat -n -r >> $DEBUG
-    $ECHO "---------------------------------------------" >> $DEBUG
-    $ECHO "Contents of /etc/resolv.conf" >> $DEBUG
-    $ECHO "* The following section lists DNS setup." >> $DEBUG
-    $ECHO "* If you can browse by IP address, but not name, suspect" >> $DEBUG
-    $ECHO "* a DNS problem." >> $DEBUG
-    cat /etc/resolv.conf >> $DEBUG
-    $ECHO "---------------------------------------------" >> $DEBUG
-    $ECHO "* The following section lists /etc/ppp/options." >> $DEBUG
-    $ECHO "* You should have NOTHING in that file." >> $DEBUG
-    $ECHO "Contents of /etc/ppp/options" >> $DEBUG
-    cat /etc/ppp/options >> $DEBUG 2>/dev/null
-    $ECHO "---------------------------------------------" >> $DEBUG
+    {
+	echo "---------------------------------------------"
+	echo "* The following section contains information about your system"
+	date
+	echo "Output of uname -a"
+	uname -a
+	echo "---------------------------------------------"
+	echo "* The following section contains information about your network"
+	echo "* interfaces.  The one you chose for PPPoE should contain the words:"
+	echo "* 'UP' and 'RUNNING'.  If it does not, you probably have an Ethernet"
+	echo "* driver problem."
+	echo "Output of ifconfig -a"
+	$IFCONFIG -a
+	echo "---------------------------------------------"
+	if [ "`uname -s`" = "Linux" ] ; then
+	    echo "* The following section contains information about kernel modules"
+	    echo "* If the module for your Ethernet card is 'tulip', you might"
+	    echo "* want to look for an updated version at http://www.scyld.com"
+	    echo "Output of lsmod"
+	    lsmod
+	    echo "---------------------------------------------"
+	fi
+	echo "* The following section lists your routing table."
+	echo "* If you have an entry which starts with '0.0.0.0', you probably"
+	echo "* have defined a default route and gateway, and pppd will"
+	echo "* not create a default route using your ISP.  Try getting"
+	echo "* rid of this route."
+	echo "Output of netstat -n -r"
+	netstat -n -r
+	echo "---------------------------------------------"
+	echo "Contents of /etc/resolv.conf"
+	echo "* The following section lists DNS setup."
+	echo "* If you can browse by IP address, but not name, suspect"
+	echo "* a DNS problem."
+	cat /etc/resolv.conf
+	echo "---------------------------------------------"
+	echo "* The following section lists /etc/ppp/options."
+	echo "* You should have NOTHING in that file."
+	echo "Contents of /etc/ppp/options"
+	cat /etc/ppp/options 2>/dev/null
+	echo "---------------------------------------------"
+    } > "$DEBUG"
 else
     DEBUG=""
 fi
@@ -115,11 +115,11 @@ case "$#" in
 esac
 
 if [ ! -f "$CONFIG" -o ! -r "$CONFIG" ] ; then
-    $ECHO "$ME: Cannot read configuration file '$CONFIG'" >& 2
+    echo "$ME: Cannot read configuration file '$CONFIG'" >& 2
     exit 1
 fi
 export CONFIG
-. $CONFIG
+. "$CONFIG"
 
 # Check for command-line overriding of ETH and USER
 case "$#" in
@@ -135,7 +135,7 @@ if [ -r "$PIDFILE" ] ; then
     # Check if still running
     kill -0 $PID > /dev/null 2>&1
     if [ $? = 0 ] ; then
-	$ECHO "$ME: There already seems to be a PPPoE connection up (PID $PID)" >& 2
+	echo "$ME: There already seems to be a PPPoE connection up (PID $PID)" >& 2
 	exit 1
     fi
     # Delete bogus PIDFILE
@@ -165,12 +165,12 @@ fi
 # Monitor connection
 TIME=0
 while [ true ] ; do
-    @sbindir@/pppoe-status $CONFIG > /dev/null 2>&1
+    @sbindir@/pppoe-status "$CONFIG" > /dev/null 2>&1
 
     # Looks like the interface came up
     if [ $? = 0 ] ; then
 	# Print newline if standard input is a TTY
-	tty -s && $ECHO " Connected!"
+	tty -s && echo " Connected!"
 	exit 0
     fi
 
@@ -186,7 +186,7 @@ while [ true ] ; do
     fi
 done
 
-$ECHO "TIMED OUT" >& 2
+echo "TIMED OUT" >& 2
 # Timed out!  Kill the pppoe-connect process and quit
 kill $CONNECT_PID > /dev/null 2>&1
 
diff --git a/src/configure b/src/configure
index d7259f0..f1b2d05 100755
--- a/src/configure
+++ b/src/configure
@@ -634,7 +634,6 @@ TARGETS
 WRAPPER
 ID
 SETSID
-ECHO
 PPPD
 INSTALL_DATA
 INSTALL_SCRIPT
@@ -4418,47 +4417,6 @@ $as_echo "no" >&6; }
 fi
 
 
-# Extract the first word of "echo", so it can be a program name with args.
-set dummy echo; ac_word=$2
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
-$as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_path_ECHO+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  case $ECHO in
-  [\\/]* | ?:[\\/]*)
-  ac_cv_path_ECHO="$ECHO" # Let the user override the test with a path.
-  ;;
-  *)
-  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-    for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_path_ECHO="$as_dir/$ac_word$ac_exec_ext"
-    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
-  done
-IFS=$as_save_IFS
-
-  test -z "$ac_cv_path_ECHO" && ac_cv_path_ECHO="echo"
-  ;;
-esac
-fi
-ECHO=$ac_cv_path_ECHO
-if test -n "$ECHO"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ECHO" >&5
-$as_echo "$ECHO" >&6; }
-else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
-fi
-
-
 
 # Extract the first word of "setsid", so it can be a program name with args.
 set dummy setsid; ac_word=$2
@@ -4562,7 +4520,7 @@ modprobe ppp_synctty > /dev/null 2>&1
 modprobe pppoe > /dev/null 2>&1
 fi
 if test "$cross_compiling" = yes; then :
-  ac_cv_linux_kernel_pppoe=no; $ECHO "cross-compiling, default: "
+  ac_cv_linux_kernel_pppoe=no; echo "cross-compiling, default: "
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
@@ -4710,7 +4668,6 @@ LIBEVENT=../libevent
 
 
 
-
 datadir_evaluated=`eval echo $datadir`
 
 
diff --git a/src/configure.in b/src/configure.in
index 2790483..e24db0e 100644
--- a/src/configure.in
+++ b/src/configure.in
@@ -144,7 +144,6 @@ AC_CHECK_SIZEOF(unsigned long)
 
 dnl Check for location of pppd
 AC_PATH_PROG(PPPD, pppd, NOTFOUND, $PATH:/sbin:/usr/sbin:/usr/local/sbin)
-AC_PATH_PROG(ECHO, echo, echo)
 
 dnl Check for setsid (probably Linux-specific)
 AC_PATH_PROG(SETSID, setsid, "", $PATH:/sbin:/usr/sbin:/usr/local/sbin)
@@ -173,7 +172,7 @@ int main()
 	if (socket(AF_PPPOX, SOCK_DGRAM, PX_PROTO_OE) >= 0) return 0; else return 1;
 }
 ],
-ac_cv_linux_kernel_pppoe=yes, ac_cv_linux_kernel_pppoe=no, [ac_cv_linux_kernel_pppoe=no; $ECHO "cross-compiling, default: "])
+ac_cv_linux_kernel_pppoe=yes, ac_cv_linux_kernel_pppoe=no, [ac_cv_linux_kernel_pppoe=no; echo "cross-compiling, default: "])
 else
 	ac_cv_linux_kernel_pppoe=no
 fi
@@ -287,7 +286,6 @@ AC_SUBST(LIC_DEFINE)
 AC_SUBST(PPPOE_SERVER_DEPS)
 AC_SUBST(RDYNAMIC)
 AC_SUBST(LIBEVENT)
-AC_SUBST(ECHO)
 AC_SUBST(LDFLAGS)
 
 datadir_evaluated=`eval echo $datadir`
-- 
2.20.1

