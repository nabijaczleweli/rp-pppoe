From 43c9218605e0d7302cc614063de8e7078acabe46 Mon Sep 17 00:00:00 2001
From: Paul Mackerras <paulus@samba.org>
Date: Thu, 25 Aug 2005 10:51:27 +0000
Subject: [PATCH] Don't override the user's choice of mtu/mru < 1492, and don't
 warn about the fact that pppoe can't do mru=1500.

---
 pppd/plugins/rp-pppoe/plugin.c | 52 +++++++++++++++++++---------------
 1 file changed, 29 insertions(+), 23 deletions(-)

diff --git a/pppd/plugins/rp-pppoe/plugin.c b/pppd/plugins/rp-pppoe/plugin.c
index 1ea46a6..1e9bd83 100644
--- a/pppd/plugins/rp-pppoe/plugin.c
+++ b/pppd/plugins/rp-pppoe/plugin.c
@@ -10,31 +10,31 @@
 * Much code and many ideas derived from pppoe plugin by Michal
 * Ostrowski and Jamal Hadi Salim, which carries this copyright:
 *
 * Copyright 2000 Michal Ostrowski <mostrows@styx.uwaterloo.ca>,
 *                Jamal Hadi Salim <hadi@cyberus.ca>
 * Borrows heavily from the PPPoATM plugin by Mitchell Blank Jr.,
 * which is based in part on work from Jens Axboe and Paul Mackerras.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version
 * 2 of the License, or (at your option) any later version.
 ***********************************************************************/
 
 static char const RCSID[] =
-"$Id: plugin.c,v 1.13 2005/07/09 09:12:48 paulus Exp $";
+"$Id: plugin.c,v 1.14 2005/08/25 10:51:27 paulus Exp $";
 
 #define _GNU_SOURCE 1
 #include "pppoe.h"
 
 #include "pppd/pppd.h"
 #include "pppd/fsm.h"
 #include "pppd/lcp.h"
 #include "pppd/ipcp.h"
 #include "pppd/ccp.h"
 #include "pppd/pathnames.h"
 
 #include <linux/types.h>
 #include <syslog.h>
 #include <sys/ioctl.h>
 #include <sys/types.h>
@@ -175,32 +175,34 @@ PPPOEConnectDevice(void)
     if (connect(conn->sessionSocket, (struct sockaddr *) &sp,
 		sizeof(struct sockaddr_pppox)) < 0) {
 	fatal("Failed to connect PPPoE socket: %d %m", errno);
 	return -1;
     }
 
     return conn->sessionSocket;
 }
 
 static void
 PPPOERecvConfig(int mru,
 		u_int32_t asyncmap,
 		int pcomp,
 		int accomp)
 {
+#if 0 /* broken protocol, but no point harrassing the users I guess... */
     if (mru > MAX_PPPOE_MTU)
 	warn("Couldn't increase MRU to %d", mru);
+#endif
 }
 
 /**********************************************************************
  * %FUNCTION: PPPOEDisconnectDevice
  * %ARGUMENTS:
  * None
  * %RETURNS:
  * Nothing
  * %DESCRIPTION:
  * Disconnects PPPoE device
  ***********************************************************************/
 static void
 PPPOEDisconnectDevice(void)
 {
     struct sockaddr_pppox sp;
@@ -282,51 +284,30 @@ PPPoEDevnameHook(char *cmd, char **argv, int doit)
 		    r=0;
 		}
 	    }
 	}
     }
 
     /* Close socket */
     close(fd);
     if (r) {
 	strncpy(devnam, cmd, sizeof(devnam));
 	if (the_channel != &pppoe_channel) {
 
 	    the_channel = &pppoe_channel;
 	    modem = 0;
 
-	    lcp_allowoptions[0].neg_accompression = 0;
-	    lcp_wantoptions[0].neg_accompression = 0;
-
-	    lcp_allowoptions[0].neg_asyncmap = 0;
-	    lcp_wantoptions[0].neg_asyncmap = 0;
-
-	    lcp_allowoptions[0].neg_pcompression = 0;
-	    lcp_wantoptions[0].neg_pcompression = 0;
-
-	    lcp_allowoptions[0].mru = MAX_PPPOE_MTU;
-	    lcp_wantoptions[0].mru = MAX_PPPOE_MTU;
-
-	    ccp_allowoptions[0].deflate = 0 ;
-	    ccp_wantoptions[0].deflate = 0 ;
-
-	    ipcp_allowoptions[0].neg_vj=0;
-	    ipcp_wantoptions[0].neg_vj=0;
-
-	    ccp_allowoptions[0].bsd_compress = 0;
-	    ccp_wantoptions[0].bsd_compress = 0;
-
 	    PPPOEInitDevice();
 	}
 	return 1;
     }
 
     return r;
 }
 
 /**********************************************************************
  * %FUNCTION: plugin_init
  * %ARGUMENTS:
  * None
  * %RETURNS:
  * Nothing
  * %DESCRIPTION:
@@ -387,29 +368,54 @@ rp_fatal(char const *str)
 /**********************************************************************
 *%FUNCTION: sysErr
 *%ARGUMENTS:
 * str -- error message
 *%RETURNS:
 * Nothing
 *%DESCRIPTION:
 * Prints a message plus the errno value to syslog.
 ***********************************************************************/
 void
 sysErr(char const *str)
 {
     rp_fatal(str);
 }
 
+void pppoe_check_options(void)
+{
+    lcp_allowoptions[0].neg_accompression = 0;
+    lcp_wantoptions[0].neg_accompression = 0;
+
+    lcp_allowoptions[0].neg_asyncmap = 0;
+    lcp_wantoptions[0].neg_asyncmap = 0;
+
+    lcp_allowoptions[0].neg_pcompression = 0;
+    lcp_wantoptions[0].neg_pcompression = 0;
+
+    if (lcp_allowoptions[0].mru > MAX_PPPOE_MTU)
+	lcp_allowoptions[0].mru = MAX_PPPOE_MTU;
+    if (lcp_wantoptions[0].mru > MAX_PPPOE_MTU)
+	lcp_wantoptions[0].mru = MAX_PPPOE_MTU;
+
+    ccp_allowoptions[0].deflate = 0;
+    ccp_wantoptions[0].deflate = 0;
+
+    ipcp_allowoptions[0].neg_vj = 0;
+    ipcp_wantoptions[0].neg_vj = 0;
+
+    ccp_allowoptions[0].bsd_compress = 0;
+    ccp_wantoptions[0].bsd_compress = 0;
+}
 
 struct channel pppoe_channel = {
     options: Options,
     process_extra_options: &PPPOEDeviceOptions,
-    check_options: NULL,
+    check_options: pppoe_check_options,
     connect: &PPPOEConnectDevice,
     disconnect: &PPPOEDisconnectDevice,
     establish_ppp: &generic_establish_ppp,
     disestablish_ppp: &generic_disestablish_ppp,
     send_config: NULL,
     recv_config: &PPPOERecvConfig,
     close: NULL,
     cleanup: NULL
 };
-- 
2.20.1

